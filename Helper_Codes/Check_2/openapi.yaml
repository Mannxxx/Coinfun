openapi: 3.0.3
info:
  version: "3.0"
  title: CoinFun - OpenAPI 3.0
  
  
  description: |-
    This website is a trading exchange where users can trade in various crypto currencies like bitcoin and several digital assets. Also, there is a P2P portal that allows a user to have expereince of how person to person trade works.
    This documentation consists of several API designs that we aim to use in implementation of our Coiinfun trading exchange.
    
 
#   termsOfService: http://swagger.io/terms/
#   contact:
#     email: apiteam@swagger.io
#   license:
#     name: Apache 2.0
#     url: http://www.apache.org/licenses/LICENSE-2.0.html
#   version: 1.0.11
# externalDocs:
#   description: Find out more about Swagger
#   url: http://swagger.io
# servers:
#   - url: https://petstore3.swagger.io/api/v3
tags:
  - name: Account Management API
    description: Abstracting and inserting user information
    # externalDocs:
    #   description: Find out more
    #   url: http://swagger.io
  - name: User Authentication API
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: Order Management API
    description: Operations about user
  
  - name: Chat Management API
    description: Operations about user
paths:
  /accmgmt/{emailId}:
    put:
      tags:
        - Account Management API
      # summary: Update an existing pet
      description: Update the existing user information
      operationId: updateUser
      parameters:
        - name: emailId
          in: path
          description: 'The email ID corresponding to which the details of the existing user need to be changed. '
          required: true
          schema:
            type: string      
      requestBody:
        description: Update an existent user info in the Table
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userinfo'
          application/xml:
            schema:
              $ref: '#/components/schemas/userinfo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/userinfo'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userinfo'         
          
        '400':
          description: Invalid email ID supplied
        '404':
          description: page not found
        '405':
          description: Validation exception
    get:
      tags:
        - Account Management API
     
      description: get the information abount the requested email Id
      operationId: getUserinfo
      parameters:
        - name: emailId
          in: path
          description: 'The email ID corresponding to which the details of the existing user need to be fetched. '
          required: true
          schema:
            type: string      
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userinfo'          
            application/xml:
              schema:
                $ref: '#/components/schemas/userinfo'
        '400':
          description: Invalid emailID supplied
        '404':
          description: page not found
        '405':
          description: Invalid input
  /accmgmt/validation: 
    put:
      tags:
        - Account Management API
      # summary: Update an existing pet
      description: update password
      operationId: updateUserpassword
      parameters:
        - name: emailId
          in: query
          description: 'The email ID corresponding to which the details of the existing user need to be changed. '
          required: true
          schema:
            type: string      
        - name: OTP
          in: query
          required: true
          schema:
            type: string      
      requestBody:
        description: Update an existent user info in the Table
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailId and Otp'
          application/xml:
            schema:
              $ref: '#/components/schemas/EmailId and Otp'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EmailId and Otp'
        required: true
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid email ID supplied
        '404':
          description: page not found
        '405':
          description: Validation exception
    
  /authent:
    get:
      tags:
        - User Authentication API
      # summary: Returns pet inventories by status
      description: used at the time of login by the user 
      operationId: getUserdetails
      parameters:
        - name: emailId
          in: query
          description: 'The email ID corresponding to which the details of the existing user need to be fetched. '
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: 'password of the user'
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/homepage'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/homepage'
        '400':
          description: authorization failed 
        
    post:
      tags:
        - User Authentication API
      # summary: Place an order for a pet
      description: used at the time of sign-up by each user
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userdetails'
          application/xml:
            schema:
              $ref: '#/components/schemas/userdetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/userdetails'
      responses:
        '200':
          description: successful operation

        '405':
          description: Invalid credentials 
          
  /authent/validation:
    post:
      tags:
        - User Authentication API
      # summary: Returns pet inventories by status
      description: used at the time of OTP verification
      operationId: getOTP
      requestBody:
        description: send the OTP to the mail ID
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPPage'
          application/xml:
            schema:
              $ref: '#/components/schemas/OTPPage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OTPPage'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/homepage'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/homepage'
        '400':
          description: authorization failed 
        

  /ordermgmt:
    post:
      tags:
        - Order Management API
     
      description: placing the order 
      operationId: placeOrder
      requestBody:
        description: Create order object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderrelatedInfo'
          application/xml:
            schema:
              $ref: '#/components/schemas/OrderrelatedInfo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderrelatedInfo'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tradinghistory'
            application/xml:
              schema:
                $ref: '#/components/schemas/tradinghistory'
  /ordermgmt/{emailId}:
    get:
      tags:
        - Order Management API
     
      description: get the trading history of the requested email ID
      operationId: getUserinfo
      parameters:
        - name: emailId
          in: path
          description: 'The email ID corresponding to which trading history of the existing user need to be fetched. '
          required: true
          schema:
            type: string      
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tradinghistorypage'          
            application/xml:
              schema:
                $ref: '#/components/schemas/tradinghistorypage'
        '400':
          description: Invalid emailID supplied
        '404':
          description: page not found
        '405':
          description: Invalid input                
  /chatmgmt/{chatId}:
    put:
      tags:
        - Chat Management API
     
      description: post the chat history of the requested email ID
      operationId: postmessage
      parameters:
        - name: chatId
          in: path
          description: 'The email ID corresponding to which trading history of the existing user need to be fetched. '
          required: true
          schema:
            type: string 

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chathistory'          
            application/xml:
              schema:
                $ref: '#/components/schemas/chathistory'
        '400':
          description: Invalid emailID supplied
        '404':
          description: page not found
        '405':
          description: Invalid input                

  
# components:
  # schemas:
  #   Order:
  #     type: object
  #     properties:
  #       id:
  #         type: integer
  #         format: int64
  #         example: 10
  #       petId:
  #         type: integer
  #         format: int64
  #         example: 198772
  #       quantity:
  #         type: integer
  #         format: int32
  #         example: 7
  #       shipDate:
  #         type: string
  #         format: date-time
  #       status:
  #         type: string
  #         description: Order Status
  #         example: approved
  #         enum:
  #           - placed
  #           - approved
  #           - delivered
  #       complete:
  #         type: boolean
  #     xml:
  #       name: order
  #   Customer:
  #     type: object
  #     properties:
  #       id:
  #         type: integer
  #         format: int64
  #         example: 100000
  #       username:
  #         type: string
  #         example: fehguy
  #       address:
  #         type: array
  #         xml:
  #           name: addresses
  #           wrapped: true
  #         items:
  #           $ref: '#/components/schemas/Address'
  #     xml:
  #       name: customer
  #   Address:
  #     type: object
  #     properties:
  #       street:
  #         type: string
  #         example: 437 Lytton
  #       city:
  #         type: string
  #         example: Palo Alto
  #       state:
  #         type: string
  #         example: CA
  #       zip:
  #         type: string
  #         example: '94301'
  #     xml:
  #       name: address
  #   Category:
  #     type: object
  #     properties:
  #       id:
  #         type: integer
  #         format: int64
  #         example: 1
  #       name:
  #         type: string
  #         example: Dogs
  #     xml:
  #       name: category
  #   User:
  #     type: object
  #     properties:
  #       id:
  #         type: integer
  #         format: int64
  #         example: 10
  #       username:
  #         type: string
  #         example: theUser
  #       firstName:
  #         type: string
  #         example: John
  #       lastName:
  #         type: string
  #         example: James
  #       email:
  #         type: string
  #         example: john@email.com
  #       password:
  #         type: string
  #         example: '12345'
  #       phone:
  #         type: string
  #         example: '12345'
  #       userStatus:
  #         type: integer
  #         description: User Status
  #         format: int32
  #         example: 1
  #     xml:
  #       name: user
  #   Tag:
  #     type: object
  #     properties:
  #       id:
  #         type: integer
  #         format: int64
  #       name:
  #         type: string
  #     xml:
  #       name: tag
  #   Pet:
  #     required:
  #       - name
  #       - photoUrls
  #     type: object
  #     properties:
  #       id:
  #         type: integer
  #         format: int64
  #         example: 10
  #       name:
  #         type: string
  #         example: doggie
  #       category:
  #         $ref: '#/components/schemas/Category'
  #       photoUrls:
  #         type: array
  #         xml:
  #           wrapped: true
  #         items:
  #           type: string
  #           xml:
  #             name: photoUrl
  #       tags:
  #         type: array
  #         xml:
  #           wrapped: true
  #         items:
  #           $ref: '#/components/schemas/Tag'
  #       status:
  #         type: string
  #         description: pet status in the store
  #         enum:
  #           - available
  #           - pending
  #           - sold
  #     xml:
  #       name: pet
  #   ApiResponse:
  #     type: object
  #     properties:
  #       code:
  #         type: integer
  #         format: int32
  #       type:
  #         type: string
  #       message:
  #         type: string
  #     xml:
  #       name: '##default'
  # requestBodies:
  #   Pet:
  #     description: Pet object that needs to be added to the store
  #     content:
  #       application/json:
  #         schema:
  #           $ref: '#/components/schemas/Pet'
  #       application/xml:
  #         schema:
  #           $ref: '#/components/schemas/Pet'
  #   UserArray:
  #     description: List of user object
  #     content:
  #       application/json:
  #         schema:
  #           type: array
  #           items:
  #             $ref: '#/components/schemas/User'
  # securitySchemes:
  #   petstore_auth:
  #     type: oauth2
  #     flows:
  #       implicit:
  #         authorizationUrl: https://petstore3.swagger.io/oauth/authorize
  #         scopes:
  #           write:pets: modify pets in your account
  #           read:pets: read your pets
  #   api_key:
  #     type: apiKey
  #     name: api_key
  #     in: header